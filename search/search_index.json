{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"zeroml \u00b6 cookiecutter https://github.com/waynerv/cookiecutter-pypackage.git\\n","title":"Home"},{"location":"#zeroml","text":"cookiecutter https://github.com/waynerv/cookiecutter-pypackage.git\\n","title":"zeroml"},{"location":"api/","text":"Top-level package for zeroml. cli \u00b6 Console script for zeroml. dl special \u00b6 losses \u00b6 ArcFaceLoss \u00b6 Most basic ArcFace implementation to be used such as: features = backbone(image) # features from any network embeddings = neck(features) # neck can be anything mapping features to 1dim embeddings (for instance 512d) logits = ArcMarginProduct()(embeddings) ArcFaceLoss()(logits, labels) forward ( self , logits , labels ) \u00b6 Defines the computation performed at every call. Should be overridden by all subclasses. .. note:: Although the recipe for forward pass needs to be defined within this function, one should call the :class: Module instance afterwards instead of this since the former takes care of running the registered hooks while the latter silently ignores them. Source code in zeroml/dl/losses.py def forward ( self , logits , labels ): logits = logits . float () cosine = logits sine = torch . sqrt ( 1.0 - torch . pow ( cosine , 2 )) phi = cosine * self . cos_m - sine * self . sin_m phi = torch . where ( cosine > self . th , phi , cosine - self . mm ) labels2 = torch . zeros_like ( cosine ) labels2 . scatter_ ( 1 , labels . view ( - 1 , 1 ) . long (), 1 ) output = ( labels2 * phi ) + (( 1.0 - labels2 ) * cosine ) s = self . s output = output * s loss = self . crit ( output , labels ) if self . weight is not None : w = self . weight [ labels ] . to ( logits . device ) loss = loss * w if self . class_weights_norm == \"batch\" : loss = loss . sum () / w . sum () if self . class_weights_norm == \"global\" : loss = loss . mean () else : loss = loss . mean () return loss if self . reduction == \"mean\" : loss = loss . mean () elif self . reduction == \"sum\" : loss = loss . sum () return loss ArcMarginProduct \u00b6 forward ( self , features ) \u00b6 Defines the computation performed at every call. Should be overridden by all subclasses. .. note:: Although the recipe for forward pass needs to be defined within this function, one should call the :class: Module instance afterwards instead of this since the former takes care of running the registered hooks while the latter silently ignores them. Source code in zeroml/dl/losses.py def forward ( self , features ): cosine = F . linear ( F . normalize ( features ), F . normalize ( self . weight )) return cosine models \u00b6 build_fastai_classification_head ( in_features , out_features ) \u00b6 Improved classification head, similar to the one used in fastai baseline models. Source code in zeroml/dl/models.py def build_fastai_classification_head ( in_features : int , out_features : int ) -> nn . Module : \"\"\" Improved classification head, similar to the one used in fastai baseline models. \"\"\" return nn . Sequential ( nn . BatchNorm1d ( in_features , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ), nn . Dropout ( p = 0.25 , inplace = False ), nn . Linear ( in_features = in_features , out_features = 512 , bias = True ), nn . ReLU ( inplace = True ), nn . BatchNorm1d ( 512 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ), nn . Dropout ( p = 0.5 , inplace = False ), nn . Linear ( in_features = 512 , out_features = out_features , bias = True ), ) io special \u00b6 image \u00b6 save_array_image ( np_array , target_path , file_name = None ) \u00b6 Saves a np.array representing an image to disk, cloud or anywhere supported by fsspec. Check save_pil for details. Source code in zeroml/io/image.py def save_array_image ( np_array , target_path , file_name = None ) -> Path : \"\"\" Saves a np.array representing an image to disk, cloud or anywhere supported by fsspec. Check save_pil for details. \"\"\" pil_image = PIL . Image . fromarray ( np_array ) return save_pil ( pil_image , target_path , file_name ) save_pil ( pil_image , target_path , file_name = None , image_type = 'PNG' ) \u00b6 Saves a pil image to disk, cloud or anywhere supported by fsspec. If file_name is not specified - generates a random name. For example: target_path=gcs://{bucket_name}/ target_path=s3://{bucket_name}/ Source code in zeroml/io/image.py def save_pil ( pil_image : PIL . Image . Image , target_path : Union [ str , Path ], file_name = None , image_type = \"PNG\" , ) -> Path : \"\"\" Saves a pil image to disk, cloud or anywhere supported by fsspec. If file_name is not specified - generates a random name. For example: target_path=gcs://{bucket_name}/ target_path=s3://{bucket_name}/ \"\"\" if file_name is None : file_name = str ( uuid . uuid4 ()) if isinstance ( target_path , str ): target_path = Path ( target_path ) target = target_path / file_name pil_image = pil_image . convert ( \"RGB\" ) bio = io . BytesIO () pil_image . save ( bio , image_type ) pil_image . close () with fsspec . open ( target , \"wb\" ) as storage : storage . write ( bio . getvalue ()) return target","title":"Modules"},{"location":"api/#zeroml.cli","text":"Console script for zeroml.","title":"cli"},{"location":"api/#zeroml.dl","text":"","title":"dl"},{"location":"api/#zeroml.dl.losses","text":"","title":"losses"},{"location":"api/#zeroml.dl.losses.ArcFaceLoss","text":"Most basic ArcFace implementation to be used such as: features = backbone(image) # features from any network embeddings = neck(features) # neck can be anything mapping features to 1dim embeddings (for instance 512d) logits = ArcMarginProduct()(embeddings) ArcFaceLoss()(logits, labels)","title":"ArcFaceLoss"},{"location":"api/#zeroml.dl.losses.ArcFaceLoss.forward","text":"Defines the computation performed at every call. Should be overridden by all subclasses. .. note:: Although the recipe for forward pass needs to be defined within this function, one should call the :class: Module instance afterwards instead of this since the former takes care of running the registered hooks while the latter silently ignores them. Source code in zeroml/dl/losses.py def forward ( self , logits , labels ): logits = logits . float () cosine = logits sine = torch . sqrt ( 1.0 - torch . pow ( cosine , 2 )) phi = cosine * self . cos_m - sine * self . sin_m phi = torch . where ( cosine > self . th , phi , cosine - self . mm ) labels2 = torch . zeros_like ( cosine ) labels2 . scatter_ ( 1 , labels . view ( - 1 , 1 ) . long (), 1 ) output = ( labels2 * phi ) + (( 1.0 - labels2 ) * cosine ) s = self . s output = output * s loss = self . crit ( output , labels ) if self . weight is not None : w = self . weight [ labels ] . to ( logits . device ) loss = loss * w if self . class_weights_norm == \"batch\" : loss = loss . sum () / w . sum () if self . class_weights_norm == \"global\" : loss = loss . mean () else : loss = loss . mean () return loss if self . reduction == \"mean\" : loss = loss . mean () elif self . reduction == \"sum\" : loss = loss . sum () return loss","title":"forward()"},{"location":"api/#zeroml.dl.losses.ArcMarginProduct","text":"","title":"ArcMarginProduct"},{"location":"api/#zeroml.dl.losses.ArcMarginProduct.forward","text":"Defines the computation performed at every call. Should be overridden by all subclasses. .. note:: Although the recipe for forward pass needs to be defined within this function, one should call the :class: Module instance afterwards instead of this since the former takes care of running the registered hooks while the latter silently ignores them. Source code in zeroml/dl/losses.py def forward ( self , features ): cosine = F . linear ( F . normalize ( features ), F . normalize ( self . weight )) return cosine","title":"forward()"},{"location":"api/#zeroml.dl.models","text":"","title":"models"},{"location":"api/#zeroml.dl.models.build_fastai_classification_head","text":"Improved classification head, similar to the one used in fastai baseline models. Source code in zeroml/dl/models.py def build_fastai_classification_head ( in_features : int , out_features : int ) -> nn . Module : \"\"\" Improved classification head, similar to the one used in fastai baseline models. \"\"\" return nn . Sequential ( nn . BatchNorm1d ( in_features , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ), nn . Dropout ( p = 0.25 , inplace = False ), nn . Linear ( in_features = in_features , out_features = 512 , bias = True ), nn . ReLU ( inplace = True ), nn . BatchNorm1d ( 512 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ), nn . Dropout ( p = 0.5 , inplace = False ), nn . Linear ( in_features = 512 , out_features = out_features , bias = True ), )","title":"build_fastai_classification_head()"},{"location":"api/#zeroml.io","text":"","title":"io"},{"location":"api/#zeroml.io.image","text":"","title":"image"},{"location":"api/#zeroml.io.image.save_array_image","text":"Saves a np.array representing an image to disk, cloud or anywhere supported by fsspec. Check save_pil for details. Source code in zeroml/io/image.py def save_array_image ( np_array , target_path , file_name = None ) -> Path : \"\"\" Saves a np.array representing an image to disk, cloud or anywhere supported by fsspec. Check save_pil for details. \"\"\" pil_image = PIL . Image . fromarray ( np_array ) return save_pil ( pil_image , target_path , file_name )","title":"save_array_image()"},{"location":"api/#zeroml.io.image.save_pil","text":"Saves a pil image to disk, cloud or anywhere supported by fsspec. If file_name is not specified - generates a random name. For example: target_path=gcs://{bucket_name}/ target_path=s3://{bucket_name}/ Source code in zeroml/io/image.py def save_pil ( pil_image : PIL . Image . Image , target_path : Union [ str , Path ], file_name = None , image_type = \"PNG\" , ) -> Path : \"\"\" Saves a pil image to disk, cloud or anywhere supported by fsspec. If file_name is not specified - generates a random name. For example: target_path=gcs://{bucket_name}/ target_path=s3://{bucket_name}/ \"\"\" if file_name is None : file_name = str ( uuid . uuid4 ()) if isinstance ( target_path , str ): target_path = Path ( target_path ) target = target_path / file_name pil_image = pil_image . convert ( \"RGB\" ) bio = io . BytesIO () pil_image . save ( bio , image_type ) pil_image . close () with fsspec . open ( target , \"wb\" ) as storage : storage . write ( bio . getvalue ()) return target","title":"save_pil()"},{"location":"changelog/","text":"Changelog \u00b6 0.1.0 (2022-02-17) \u00b6 First release on PyPI. 0.2.1 (2022-02-17) \u00b6 Test","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#010-2022-02-17","text":"First release on PyPI.","title":"0.1.0 (2022-02-17)"},{"location":"changelog/#021-2022-02-17","text":"Test","title":"0.2.1 (2022-02-17)"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/i008/zeroml/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation \u00b6 zeroml could always use more documentation, whether as part of the official zeroml docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/i008/zeroml/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! \u00b6 Ready to contribute? Here's how to set up zeroml for local development. Fork the zeroml repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/zeroml.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install -E test -E doc -E dev Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ poetry run tox Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8 and 3.9. Check https://github.com/i008/zeroml/actions and make sure that the tests pass for all supported Python versions. Tips \u00b6 $ poetry run pytest tests/test_zeroml.py To run a subset of tests. Deploying \u00b6 A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: $ poetry run bump2version patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/i008/zeroml/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"zeroml could always use more documentation, whether as part of the official zeroml docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/i008/zeroml/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up zeroml for local development. Fork the zeroml repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/zeroml.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install -E test -E doc -E dev Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ poetry run tox Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8 and 3.9. Check https://github.com/i008/zeroml/actions and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"$ poetry run pytest tests/test_zeroml.py To run a subset of tests.","title":"Tips"},{"location":"contributing/#deploying","text":"A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: $ poetry run bump2version patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"installation/","text":"Installation \u00b6 Stable release \u00b6 To install zeroml, run this command in your terminal: $ pip install zeroml This is the preferred method to install zeroml, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From source \u00b6 The source for zeroml can be downloaded from the Github repo . You can either clone the public repository: $ git clone git://github.com/i008/zeroml Or download the tarball : $ curl -OJL https://github.com/i008/zeroml/tarball/master Once you have a copy of the source, you can install it with: $ pip install .","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#stable-release","text":"To install zeroml, run this command in your terminal: $ pip install zeroml This is the preferred method to install zeroml, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"installation/#from-source","text":"The source for zeroml can be downloaded from the Github repo . You can either clone the public repository: $ git clone git://github.com/i008/zeroml Or download the tarball : $ curl -OJL https://github.com/i008/zeroml/tarball/master Once you have a copy of the source, you can install it with: $ pip install .","title":"From source"},{"location":"usage/","text":"Usage \u00b6 To use zeroml in a project import zeroml","title":"Usage"},{"location":"usage/#usage","text":"To use zeroml in a project import zeroml","title":"Usage"}]}